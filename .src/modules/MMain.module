' Gambas module file

' Name of global config file
Public Const GLOBAL_CONFIG As String = "/etc/accelgui.conf"
' Name of global config backup file
Public Const GLOBAL_CONFIG_BACKUP As String = "/etc/accelgui.conf.bak"
' Margin between controls
Public Const MARGIN As Byte = 8
' Help file path
Public Const HELPFILE As String = "help/index.html"
' Toolbar height
Public Const TLB_HEIGHT As Byte = 64
' Symbols used in ip-addresses
Private Const IP_SYMBOLS As String = "0123456789."
' Prefix for crypting
Public Const PREFIX As String = "UwcITSooYIcpI"
' Object for saving application settings
Public objSettings As Settings
' Currently authorized user
Public strCurrentUser As String

' -----------------------------------------------------------------------
'' The startup procedure
' -----------------------------------------------------------------------

Public Sub Main()

    If Not Exist(MMain.GLOBAL_CONFIG) Then
        If Exist(MMain.GLOBAL_CONFIG_BACKUP) Then
            If User.Id = 0 Then
                If ShowMessage(("Config file does not exist.") & gb.CrLf & ("Want to use backup?"), MMsgType.Question) = 1 Then
                    Try Copy MMain.GLOBAL_CONFIG_BACKUP To MMain.GLOBAL_CONFIG
                    If Error Then ShowMessage(("Could not use backup config"), MMsgType.Warning)
                Endif
            Endif
        Endif
    Endif
    objSettings = New Settings(GLOBAL_CONFIG)
    FAuth.Show()

End

' -----------------------------------------------------------------------
'' The function checks whether given string complies to ip-address format
' -----------------------------------------------------------------------

Public Function IsIpAddress(strIp As String) As Boolean

    Dim i As Byte
    Dim bytLastPos, bytNewPos As Byte
    Dim shtOctet As Short

    strIp = Trim(strIp)
    ' The length of ip-address must be from 7 to 15 symbols
    If Len(strIp) < 7 Or If Len(strIp) > 15 Then Return False
    For i = 1 To Len(strIp)
        If InStr(IP_SYMBOLS, Mid(strIp, i, 1)) = 0 Then Return False
    Next
    bytLastPos = 1
    For i = 1 To 3
        bytNewPos = InStr(strIp, ".", bytLastPos)
        If bytNewPos = 0 Then Return False
        shtOctet = CShort(Mid(strIp, bytLastPos, bytNewPos - bytLastPos))
        ' Octets can be from 0 to 255
        If shtOctet > 255 Then Return False
        bytLastPos = bytNewPos + 1
        If i = 3 Then
            shtOctet = CShort(Mid(strIp, bytLastPos, Len(strIp) + 1 - bytLastPos))
            If shtOctet > 255 Then Return False
        Endif
    Next
    Return True

End

' -----------------------------------------------------------------------
'' The procedure makes the given row active and visible in the grid
' -----------------------------------------------------------------------
Public Sub ActivateRow(Grid As GridView, Row As Integer)

    If Grid.Rows.Count > 0 Then
        Grid.Rows[Row].Selected = True
        Grid.Current.EnsureVisible()
    Endif

End

' -----------------------------------------------------------------------
'' The function checks whether there is a duplicate data in the grid
' -----------------------------------------------------------------------
Public Function NoDuplicates(strName As String, varAddress As Variant, Optional intSkip As Integer = -1) As Boolean

    Dim i As Integer

    For i = 0 To FServers.grvServers.Rows.Max
        If intSkip > -1 Then
            If i = intSkip Then Continue
        Endif
        If FServers.grvServers[i, 1].Text = Trim(strName) Then Return False
        If FServers.grvServers[i, 2].Text = Trim(CStr(varAddress)) Then Return False
    Next
    Return True

End

' -----------------------------------------------------------------------
'' The procedure enables/disables toolbar buttons
' -----------------------------------------------------------------------
Public Sub EnableControls(bolAction As Boolean)

    With FServers
        .tlbAction.Enabled = bolAction
        .tlbFirst.Enabled = bolAction
        .tlbPrevious.Enabled = bolAction
        .tlbNext.Enabled = bolAction
        .tlbLast.Enabled = bolAction
    End With

End

' -----------------------------------------------------------------------
'' The procedure shuts down daeamon using given method
' -----------------------------------------------------------------------
Public Sub ShutdownDaemon(strShutMode As String)

    Dim objWindow As FSessions
    Dim strMessage As String

    If FMain.wksServers.Windows.Count > 0 Then
        objWindow = FMain.wksServers.ActiveWindow
        If objWindow.objServer.Connected Then
            If strShutMode <> MShutMode.Cancel Then
                strMessage = ("Are you sure to shutdown the daemon?")
            Else
                strMessage = ("Are you sure to cancel the shutdown process?")
            Endif
            If ShowMessage(strMessage, MMsgType.Question) = 1 Then
                objWindow.objServer.ShutMode = strShutMode
                objWindow.grvSessions.Clear()
                objWindow.grvSessions.Rows.Count = 0
                objWindow.objServer.Shutdown()
            Endif
        Endif
    Endif

End

' -----------------------------------------------------------------------
'' The procedure terminates current or all sessions using given method
' -----------------------------------------------------------------------
Public Sub TerminateSessions(strTermMode As String, Optional bolAll As Boolean)

    Dim objWindow As FSessions
    Dim intRow As Integer
    Dim strName As String

    If FMain.wksServers.Windows.Count > 0 Then
        objWindow = FMain.wksServers.ActiveWindow
        If Trim(strTermMode) = "" Then strTermMode = MTermMode.Soft
        objWindow.objServer.TermMode = strTermMode
        If bolAll Then
            If ShowMessage(("Are you sure to kill all sessions?"), MMsgType.Question) = 1 Then
                objWindow.objServer.KillAll()
            Endif
        Else
            intRow = objWindow.grvSessions.Row
            If intRow >= 0 Then
                strName = objWindow.grvSessions[intRow, 1].Text
                If ShowMessage(("Are you sure to kill current session?"), MMsgType.Question) = 1 Then
                    objWindow.objServer.KillSession(strName)
                Endif
            Endif
        Endif
    Endif

End

' -----------------------------------------------------------------------
'' The procedure restarts daeamon using given method
' -----------------------------------------------------------------------
Public Sub RestartDaemon(strTermMode As String)

    Dim objWindow As FSessions

    If FMain.wksServers.Windows.Count > 0 Then
        objWindow = FMain.wksServers.ActiveWindow
        If objWindow.objServer.Connected Then
            If ShowMessage(("Are you sure to restart the daemon?"), MMsgType.Question) = 1 Then
                If Trim(strTermMode) = "" Then strTermMode = MTermMode.Soft
                objWindow.objServer.TermMode = strTermMode
                objWindow.grvSessions.Clear()
                objWindow.grvSessions.Rows.Count = 0
                objWindow.objServer.Restart()
            Endif
        Endif
    Endif

End

' -----------------------------------------------------------------------
'' The procedure shows message in dialogbox of given type
' -----------------------------------------------------------------------
Public Function ShowMessage(strMessage As String, strType As String) As Integer

    Message.Title = "Accel GUI"
    Select Case strType
        Case MMsgType.Delete
            Return Message.Delete(strMessage, ("Yes"), ("No"))
        Case MMsgType.Err
            Return Message.Error(strMessage)
        Case MMsgType.Info
            Return Message.Info(strMessage)
        Case MMsgType.Question
            Return Message.Question(strMessage, ("Yes"), ("No"))
        Case MMsgType.Warning
            Return Message.Warning(strMessage)
    End Select

End
